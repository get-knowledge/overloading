package com.apollo.gis.authserver.service;

import static org.junit.Assert.assertNotNull;

import java.io.IOException;
import java.lang.reflect.Field;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.util.ReflectionUtils;

import com.apollo.gis.authserver.entity.User;
import com.apollo.gis.authserver.repository.UserRepository;

/**
 * @implNote This class provide Junits for {@link UserDetailsServiceImpl} class.
 * @author Dhananjay Verma
 *
 */
@RunWith(SpringRunner.class)
@WebAppConfiguration
@SpringBootTest
public class UserDetailsServiceTest {

	@InjectMocks
	private CustomUserDetailsService userDetailsService;

	private UserRepository userRepository;

	private User user;

	@Before
	public void setup() throws IOException {

		MockitoAnnotations.initMocks(this);
		userRepository = Mockito.mock(UserRepository.class);

		Field field = ReflectionUtils.findField(CustomUserDetailsService.class, "userRepository");
		ReflectionUtils.makeAccessible(field);
		ReflectionUtils.setField(field, userDetailsService, userRepository);

		user = Mockito.mock(User.class);
	}

	@Test
	public void testLoadUserByUsername() {

		String username = "admin";
		Mockito.when(userRepository.findByUsername(username)).thenReturn(user);
		
		assertNotNull(user);

		//Assert.assertNotEquals(userDetailsService.loadUserByUsername(username), user);
	}
}
