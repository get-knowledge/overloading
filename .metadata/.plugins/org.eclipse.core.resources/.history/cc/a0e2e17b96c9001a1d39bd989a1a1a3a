package com.gobeyond.ecommerce.auth.server.entity;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.apollo.gis.authserver.repository.UserRepository;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
class UserTest {

	@Test
	void userTest() {

		User usr = new User();

		usr.setEmail("admin@yopmail.com");
		usr.isEnabled();

		assertFalse(usr.isEnabled());
		assertTrue(usr.isAccountNonExpired());
		assertTrue(usr.isAccountNonLocked());
		assertTrue(usr.isCredentialsNonExpired());

		assertNull(usr.getPassword());
		assertNull(usr.getUsername());

		Role role = new Role();

		List<Role> lstRole = new ArrayList<Role>();

		role.setName("role_admin");

		lstRole.add(role);

		List<Permission> lstPermission = new ArrayList<Permission>();

		Permission permission = new Permission();
		permission.setName("can_create_user");

		role.setPermissions(lstPermission);

	}

	@Autowired
	UserRepository userRepository;

	public User getUserDetail() {

		String username = "admin";

		User usr = userRepository.findByUsername(username);

		return usr;

	}

	@Test
	void testIsEnabled() {

		boolean isEnabled = getUserDetail().isEnabled();

		assertTrue(isEnabled);

	}

	@Test
	void testIsAccountNonExpired() {

		boolean isAccountNonExpired = getUserDetail().isAccountNonExpired();

		assertTrue(isAccountNonExpired);

	}

	@Test
	void testIsCredentialsNonExpired() {

		boolean isCredentialsNonExpired = getUserDetail().isCredentialsNonExpired();

		assertTrue(isCredentialsNonExpired);

	}

	@Test
	void testIsAccountNonLocked() {

		boolean isAccountNonLocked = getUserDetail().isAccountNonLocked();

		assertTrue(isAccountNonLocked);
	}

	@Test
	void testGetAuthorities() {

		Collection<? extends GrantedAuthority> authorities = getUserDetail().getAuthorities();

		assertNotNull(authorities);

	}

	@Test
	void testGetPassword() {

		String password = getUserDetail().getPassword();

		assertEquals("{bcrypt}$2a$10$EOs8VROb14e7ZnydvXECA.4LoIhPOoFHKvVF/iBZ/ker17Eocz4Vi", password);
	}

	@Test
	void testGetUsername() {

		String username = getUserDetail().getUsername();

		assertEquals("admin", username);
	}

	@Test
	void testGetEmail() {

		String email = getUserDetail().getEmail();

		assertEquals("admin@yopmail.com", email);

	}

	@Test
	void testGetRoles() {

		List<Role> roles = getUserDetail().getRoles();

		assertEquals("role_admin", roles.get(0).getName());

	}

	@Test
	void testGetPermissions() {

		List<Permission> permissionLst = getUserDetail().getRoles().get(0).getPermissions();

		assertNotNull(permissionLst);

	}

}
